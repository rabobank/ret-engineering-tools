name: Release RET CLI

on:
    workflow_dispatch:
        inputs:
            version:
                description: 'Version to release'
                required: true

env:
    GRAAL_VERSION: '22.3.0'
    JAVA_VERSION: '19'
    JAVA_DISTRO: 'zulu'

jobs:

    # Build native executable per runner
    build:
        name: 'Build with Graal on ${{ matrix.os }}'
        strategy:
            fail-fast: true
            matrix:
                os: [ ubuntu-latest, macOS-latest, windows-latest ]
        runs-on: ${{ matrix.os }}
        steps:
            -   name: 'Check out repository'
                uses: actions/checkout@v3
                with:
                    ref: tags/${{ github.event.inputs.version }}

            -   name: 'Set up Graal'
                uses: graalvm/setup-graalvm@v1
                with:
                    version: ${{ env.GRAAL_VERSION }}
                    java-version: ${{ env.JAVA_VERSION }}
                    components: 'native-image'
                    github-token: ${{ secrets.GITHUB_TOKEN }}

            -   name: 'Cache Maven packages'
                uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                    restore-keys: ${{ runner.os }}-maven-

            -   name: 'Build Native Image'
                run: mvn -B -ntp --file pom.xml -Pnative package

            -   name: 'Create distribution'
                run: mvn -B -ntp --file pom.xml -Pdist package -DskipTests

            -   name: 'Upload build artifact'
                uses: actions/upload-artifact@v3
                with:
                    name: artifacts
                    path: |
                        target/distributions/*.zip
                        target/distributions/*.tar.gz

    # Collect all executables and release
    release:
        needs: [ build ]
        runs-on: ubuntu-latest
        steps:
            -   name: 'Check out repository'
                uses: actions/checkout@v3
                with:
                    ref: tags/${{ github.event.inputs.version }}
                    persist-credentials: false # use GITHUB_TOKEN, instead of personal token
                    fetch-depth: 0 # otherwise, pushing refs to dest repo fails

            -   name: 'Download all build artifacts'
                uses: actions/download-artifact@v3

            -   name: 'Set up Java'
                uses: actions/setup-java@v3
                with:
                    java-version: ${{ env.JAVA_VERSION }}
                    distribution: ${{ env.JAVA_DISTRO }}

            -   name: 'Cache Maven packages'
                uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                    restore-keys: ${{ runner.os }}-maven-

            -   name: 'Release with JReleaser'
                env:
                    JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: mvn -B -ntp --file pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release
